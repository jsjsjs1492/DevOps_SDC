# dev-community/promtail/promtail-config.yml
server:
  http_listen_port: 9080 # Promtail의 내부 HTTP 포트
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml # Promtail이 각 로그 파일에서 마지막으로 읽은 위치를 기록

clients:
  # Loki 서버의 내부 주소 및 포트
  # docker-compose.yml 내에서 loki 서비스 이름으로 접근합니다.
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  # 호스트 시스템 로그 수집
  - job_name: system-logs
    static_configs:
      - targets:
          - localhost # Promtail이 호스트에서 로그를 읽음
        labels:
          job: varlogs # Loki에서 로그를 필터링할 때 사용할 레이블
          __path__: /var/log/*log # 수집할 호스트 로그 파일 경로 (와일드카드 사용 가능)
                                  # 예: /var/log/syslog, /var/log/auth.log, /var/log/daemon.log 등
    # pipeline_stages: # 추가적인 파싱이 필요하다면 여기에 YAML 파싱 등을 추가할 수 있습니다.
    #   - cri: {} # Docker 컨테이너 로그가 아니므로 필요 없을 수 있음

  # Docker 컨테이너 로그 수집
  - job_name: docker-logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: containerlogs # Loki에서 로그를 필터링할 때 사용할 레이블
          # Docker 컨테이너의 표준 로그 파일 경로
          # 이 경로는 docker-compose.yml의 volumes 설정과 일치해야 합니다.
          __path__: /var/lib/docker/containers/*/*.log
    pipeline_stages:
      - docker: # Docker 컨테이너 로그의 JSON 형식을 파싱하여 구조화
          # Docker 로그 드라이버가 생성하는 JSON 로그를 파싱합니다.
          # 이는 Docker가 컨테이너 로그를 JSON 포맷으로 저장할 때 유용합니다.
          # 로그 라인에서 "container_name", "image_name", "container_id" 등의 레이블을 자동으로 추출합니다.
          use_incoming_timestamp: true # Docker 로그의 타임스탬프를 사용
