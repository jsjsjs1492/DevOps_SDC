pipeline {
    agent none

    environment {
        FRONTEND_IMAGE = 'knw125/dev-community-frontend'
        FRONTEND_SERVER = 'ubuntu@3.39.193.241'
    }

    stages {
        // Github에서 코드 가져오기
        stage('Checkout') {
            agent any
            steps {
                git credentialsId: 'github-credentials', url: 'https://github.com/KangNaewon/dev-community.git', branch: 'develop'
            }
        }

        // Docker 캐시 및 실행 중인 컨테이너 정리
        stage('Clean Docker') {
            agent any
            steps {
                sh '''
                echo "Stopping running containers..."
                docker ps -q | xargs -r docker stop

                echo "Removing all containers..."
                docker ps -a -q | xargs -r docker rm

                echo "Pruning system..."
                docker system prune -af
                '''
            }
        }

        // Docker 이미지 빌드, DockerHub에 push
        stage('Build Docker Image & Push') {
            agent any
            steps {
                dir('dev-community-frontend') {
                    script {
                        docker.withRegistry('', 'dockerhub-credentials') {
                            docker.build("${FRONTEND_IMAGE}:${env.BUILD_NUMBER}").push('latest')
                        }
                    }
                }
            }
        }

        // 프론트엔드 서버에 배포
        stage('Deploy') {
            agent any
            steps {
                sh """
                ssh -o StrictHostKeyChecking=no ${FRONTEND_SERVER} \\
                'docker pull ${FRONTEND_IMAGE}:latest && \\
                 docker stop react-app || true && \\
                 docker rm react-app || true && \\
                 docker run -d -p 8000:80 --name react-app ${FRONTEND_IMAGE}:latest'
                """
            }
        }
    }
}
