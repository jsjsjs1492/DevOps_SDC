# dev-community/docker-compose.yml
version: '3.8'

services:
  # 데이터베이스 서비스 (기존 backend compose 파일에서 가져옴)
  db:
    image: mysql:8.0 # 실제 사용하는 MySQL 버전으로 변경 (8.0.42가 안정적이라면 8.0.42로)
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 1234 # 실제 DB 비밀번호로 변경
      MYSQL_DATABASE: dev_community
    # 외부에서 DB에 직접 접근할 필요가 없다면 ports는 제거하거나 주석 처리
    # - "3306:3306"
    networks:
      - dev-community-network
    volumes:
      - mysql-data:/var/lib/mysql

  # Redis 서비스 (기존 backend compose 파일에서 가져옴)
  redis:
    image: redis:6.2
    container_name: redis
    # 외부에서 Redis에 직접 접근할 필요가 없다면 ports는 제거하거나 주석 처리
    # - "6379:6379"
    networks:
      - dev-community-network

  # 백엔드 서비스 (기존 backend compose 파일에서 가져옴)
  backend:
    image: ${DOCKER_REGISTRY}/${BACKEND_IMAGE}:latest
    container_name: backend # 명시적인 컨테이너 이름
    # 백엔드는 이제 Nginx를 통해 접근되므로 외부 포트 노출 불필요.
    # 개발 중 직접 백엔드 테스트 필요 시에만 주석 해제하여 사용
    # ports:
    #   - "${BACKEND_PORT}:${BACKEND_PORT}"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/dev_community?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=UTF-8
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 1234
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      ACCESS_KEY: ${ACCESS_KEY}
      SECRET_KEY: ${SECRET_KEY}
      # application-prod.properties에 직접 설정했으므로 여기서 다시 설정할 필요는 없지만,
      # 명시적으로 주입하려면 여기에 추가 (JENKINSFILE에서 export된 변수들이 들어옴)
 
    volumes:
      - ./backend-logs:/app/logs
    depends_on:
      - db
      - redis # Redis도 의존성에 추가
    networks:
      - dev-community-network

  # 프론트엔드 서비스 (기존 frontend compose 파일에서 가져옴)
  # 이 서비스가 Nginx를 포함하며, 외부로 노출되는 포트를 담당합니다.
  frontend:
    image: ${DOCKER_REGISTRY}/${FRONTEND_IMAGE}:latest
    container_name: frontend
    ports:
      # 외부에서 접근할 포트: 컨테이너 내부 Nginx 포트 (80)
      - "${FRONTEND_PORT:-80}:80"
    volumes:
      - ./frontend-nginx-logs:/var/log/nginx # Nginx 로그 볼륨 마운트
    depends_on:
      - backend # 프론트엔드가 백엔드 API에 의존하므로 추가
    networks:
      - dev-community-network

networks:
  dev-community-network:
    driver: bridge

volumes:
  mysql-data:
  # frontend-nginx-logs: # 명시적으로 볼륨 관리한다면 추가
  # backend-logs: # 명시적으로 볼륨 관리한다면 추가