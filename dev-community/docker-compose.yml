# dev-community/docker-compose.yml
version: '3.8'

services:
  # 데이터베이스 서비스
  db:
    image: mysql:8.0 # 실제 MySQL 버전에 맞게 유지
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: dev_community
    networks:
      - dev-community-network
    volumes:
      - mysql-data:/var/lib/mysql # 데이터 유지를 위한 영구 볼륨

  # Redis 서비스
  redis:
    image: redis:6.2 # 실제 Redis 버전에 맞게 유지
    container_name: redis
    networks:
      - dev-community-network
    # ports: # Redis는 백엔드에서만 접근하므로 외부에 노출할 필요 없음
    #   - "6379:6379"

  # 백엔드 서비스 (Spring Boot)
  backend:
    image: ${DOCKER_REGISTRY}/${BACKEND_IMAGE}:latest
    container_name: backend
    ports:
      - "${BACKEND_PORT}:8081" # EC2 외부 포트:컨테이너 내부 포트
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/dev_community?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=UTF-8
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 1234
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      ACCESS_KEY: ${ACCESS_KEY}
      SECRET_KEY: ${SECRET_KEY}
    # 백엔드 로그를 Promtail이 수집할 수 있도록 컨테이너 내부 로그 경로를 호스트 볼륨에 마운트
    # /app/logs는 Spring Boot 애플리케이션의 기본 로그 경로로 가정 (logback 설정에 따라 다름)
    volumes:
      - backend-logs:/app/logs # 백엔드 애플리케이션 로그를 위한 명명된 볼륨
    depends_on:
      - db
      - redis
    networks:
      - dev-community-network

  # 프론트엔드 서비스 (React + Nginx)
  frontend:
    image: ${DOCKER_REGISTRY}/${FRONTEND_IMAGE}:latest
    container_name: frontend
    ports:
      - "${FRONTEND_PORT:-80}:80" # 외부에서 접근할 포트: 컨테이너 내부 Nginx 포트 (80)
    # Nginx 로그를 Promtail이 수집할 수 있도록 볼륨 마운트
    volumes:
      - frontend-nginx-logs:/var/log/nginx # Nginx 로그를 위한 명명된 볼륨
    depends_on:
      - backend # 프론트엔드가 백엔드 API에 의존
    networks:
      - dev-community-network

  # --- 모니터링 스택 ---

  prometheus:
    image: prom/prometheus:latest 
    container_name: prometheus
    ports:
      - "8002:9090" # Prometheus 웹 UI 포트 (EC2 외부 포트:컨테이너 내부 포트)
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro # Prometheus 설정 파일 마운트 (읽기 전용)
      - prometheus-data:/prometheus # 메트릭 데이터 저장을 위한 영구 볼륨
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - dev-community-network
    restart: always

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000" # Grafana 웹 UI 포트 (EC2 외부 포트:컨테이너 내부 포트)
    volumes:
      - grafana-data:/var/lib/grafana # 대시보드, 데이터소스 설정 저장을 위한 영구 볼륨
    environment:
      # 초기 admin 계정 설정. 운영 환경에서는 이 비밀번호를 환경 변수로 주입하거나 Vault와 같은 Secret Manager 사용
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin_password # 강력한 비밀번호로 변경하세요!
      GF_SMTP_ENABLED: true
      GF_SMTP_HOST: smtp.gmail.com:587
      GF_SMTP_USER: seong.jang0313@gmail.com
      GF_SMTP_PASSWORD: xfvojxhsjaydxxls
      GF_SMTP_FROM_ADDRESS: seong.jang0313@gmail.com
      GF_SMTP_FROM_NAME: Grafana
      GF_SMTP_SKIP_VERIFY: true            # 인증서 오류 방지 (옵션)
      GF_SMTP_STARTTLS_POLICY: Opportunistic
    networks:
      - dev-community-network
    restart: always

  node_exporter:
    image: prom/node-exporter:latest # 최신 안정 버전 사용 권장
    container_name: node_exporter
    # 호스트의 메트릭을 수집하기 위해 host 네트워크 모드 사용 (가장 쉬운 방법)
    # 이렇게 하면 컨테이너가 호스트의 네트워크 스택을 공유합니다.
    ports:
      - "8001:9100"
    # pid: host # 호스트의 프로세스 정보에 접근 허용
    volumes:
      - /proc:/host/proc:ro # 읽기 전용으로 /proc 마운트
      - /sys:/host/sys:ro # 읽기 전용으로 /sys 마운트
      - /:/rootfs:ro # 읽기 전용으로 루트 파일 시스템 마운트 (파일 시스템 메트릭 수집용)
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      # Docker가 설치된 파일 시스템만 모니터링하도록 제외 규칙 설정 (선택 사항)
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers)($|/)'
    networks:
      - dev-community-network
    restart: always

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest # 최신 안정 버전 사용 권장
    container_name: cadvisor
    ports:
      - "8088:8080" # cAdvisor 웹 UI/API 포트
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw # Docker 소켓 접근
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro # Docker 데이터 디렉토리 접근
      - /dev/disk/:/dev/disk:ro # 디스크 I/O 메트릭 수집
    networks:
      - dev-community-network
    restart: always

  # --- 로그 수집 스택 ---

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/loki
    networks:
      - dev-community-network
    restart: always

  promtail:
    image: grafana/promtail:latest # Promtail 최신 안정 버전 사용 권장 (예: 3.0.0)
    container_name: promtail
    volumes:
      - ./promtail/promtail-config.yml:/etc/promtail/promtail-config.yml:ro # Promtail 설정 파일 마운트 (읽기 전용)
      - /var/log:/var/log:ro # 호스트의 시스템 로그 접근 (예: auth.log, syslog)
      # Docker 컨테이너의 실제 로그 파일 경로를 마운트
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - dev-community-network
    depends_on:
      - loki # Promtail은 Loki가 실행 중이어야 로그를 보낼 수 있음
    restart: always

networks:
  dev-community-network:
    driver: bridge # 모든 서비스가 이 네트워크를 통해 통신

volumes:
  mysql-data: # MySQL 데이터 지속성
  prometheus-data: # Prometheus 메트릭 데이터 지속성
  grafana-data: # Grafana 대시보드 및 설정 지속성
  loki-data: # Loki 로그 데이터 지속성
  backend-logs: # 백엔드 애플리케이션 로그 지속성 (선택 사항, 로컬 디버깅용)
  frontend-nginx-logs: # 프론트엔드 Nginx 로그 지속성 (선택 사항, 로컬 디버깅용)
