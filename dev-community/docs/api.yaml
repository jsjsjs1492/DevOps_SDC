openapi: 3.0.0
info:
  title: Developer Community API
  version: 1.0.0

components:
  schemas:
  
    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: string
          example: "잘못된 요청입니다"
        code:
          type: string
          example: "INVALID_REQUEST"
        timestamp:
          type: string
          format: date-time
          example: "2025-03-26T16:00:00Z"
          
    UserSimple:
      type: object
      properties:
        id:
          type: integer
        nickname:
          type: string
        profileImageUrl:
          type: string

    PostDetailResponse:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        content:
          type: string
        author:
          $ref: '#/components/schemas/UserSimple'
        createdAt:
          type: string
          format: date-time
        likeCount:
          type: integer
        isLiked:
          type: boolean
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
            
    PostCreateResponse:
      type: object
      properties:
        id:
          type: integer
        createdAt:
          type: string
          format: date-time

    Comment:
      type: object
      properties:
        id:
          type: integer
        author:
          type: string
        content:
          type: string
        createdAt:
          type: string
          format: date-time
          
    CreatePostRequest:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
          example: "개발자 커뮤니티 첫 글입니다"
        content:
          type: string
          example: "안녕하세요! 첫 글을 작성해봅니다. 반가워요 :)"
          
    UpdatePostRequest:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
          example: "제목 수정입니다"
        content:
          type: string
          example: "수정된 본문입니다."

    PostUpdateResponse:
      type: object
      properties:
        id:
          type: integer
        updatedAt:
          type: string
          format: date-time
          
    PostSummary:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        author:
          $ref: '#/components/schemas/UserSimple'
        likeCount:
          type: integer
        commentCount:
          type: integer
        createdAt:
          type: string
          format: date-time
          
    PostListResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/PostSummary'
        totalPages:
          type: integer
        totalElements:
          type: integer
        number:
          type: integer
        size:
          type: integer

paths:
  /auth/signup:
    post:
      summary: 회원가입
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id: 
                  type: string
                email:
                  type: string
                password:
                  type: string
                nickname:
                  type: string
      responses:
        '201':
          description: 회원가입 성공
        '400':
          description: 유효성 검증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: 중복 이메일
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  
  /auth/login:
    post:
      summary: 로그인
      description: 이메일과 비밀번호로 로그인합니다. 성공 시 세션이 생성되며, JSESSIONID가 쿠키로 전달됩니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - password
              properties:
                id:
                  type: string
                  format: id
                  example: dev123
                password:
                  type: string
                  format: password
                  example: securepassword
      responses:
        '200':
          description: 로그인 성공
          headers:
            Set-Cookie:
              description: 세션 쿠키 (JSESSIONID)
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: integer
                  loginId:
                    type: string
                  nickname:
                    type: string
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      summary: 로그아웃
      description: 현재 세션을 종료합니다.
      responses:
        '204':
          description: 로그아웃 성공 (세션 만료)
        '401':
          description: 인증되지 않은 사용자
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /auth/email/verify:
    post:
      summary: 이메일 인증 코드 전송
      description: 회원가입 전에 학교 이메일로 인증 코드를 보냅니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: "20230001@school.ac.kr"
      responses:
        '200':
          description: 인증 메일 전송 성공
        '400':
          description: 잘못된 이메일 형식 또는 이미 인증됨
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/email/check:
    post:
      summary: 이메일 인증 코드 확인
      description: 사용자에게 전송된 인증 코드를 확인합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - code
              properties:
                email:
                  type: string
                code:
                  type: string
      responses:
        '200':
          description: 인증 성공
        '400':
          description: 인증 실패 (코드 불일치, 만료 등)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /member/{loginId}:
    get:
      summary: 사용자 정보 조회
      description: loginId에 해당하는 프로필 정보를 조회한다.
      parameters:
        - name: loginId
          in: path
          required: true
          schema:
            type: string
          description: 사용자 로그인 ID
      responses:
        '200':
          description: 회원 정보 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  nickname:
                    type: string
                  profileImageUrl:
                    type: string
                    format: uri
                  followerCount:
                    type: integer
                  followingCount:
                    type: integer
                  receivedLikeCount:
                    type: integer
                    
  /member/{loginId}/followers:
    get:
      summary: 팔로워 목록 조회
      description: loginId를 기준으로 해당 사용자의 팔로워 목록을 조회합니다.
      parameters:
        - name: loginId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 팔로워 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    loginId:
                      type: string
                    nickname:
                      type: string
                    profileImageUrl:
                      type: string
                      format: uri

  /member/{loginId}/followings:
    get:
      summary: 팔로잉 목록 조회
      description: loginId를 기준으로 해당 사용자가 팔로우한 사용자 목록을 조회합니다.
      parameters:
        - name: loginId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 팔로잉 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    loginId:
                      type: string
                    nickname:
                      type: string
                    profileImageUrl:
                      type: string
                      format: uri
                      
  /member/{loginId}/follow:
    post:
      summary: 팔로우 추가
      description: 로그인한 사용자가 loginId에 해당하는 사용자를 팔로우합니다.
      parameters:
        - name: loginId
          in: path
          required: true
          schema:
            type: string
          description: 팔로우 대상 유저의 로그인 ID
      responses:
        '200':
          description: 팔로우 성공
        '400':
          description: 이미 팔로우 중인 경우 등 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: 팔로우 취소
      description: 로그인한 사용자가 loginId에 해당하는 사용자에 대한 팔로우를 취소합니다.
      parameters:
        - name: loginId
          in: path
          required: true
          schema:
            type: string
          description: 언팔로우 대상 유저의 로그인 ID
      responses:
        '200':
          description: 언팔로우 성공
        '404':
          description: 팔로우 관계가 존재하지 않을 경우
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /post/{postId}:
    get:
      summary: 게시글 상세 조회
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 게시글 상세 정보
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDetailResponse'
                
    delete:
      summary: 게시글 삭제
      description: 사용자가 자신이 작성한 게시글을 삭제한다.
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 삭제 성공 (내용 없음)
        '401':
          description: 인증 필요
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 권한 없음 (본인 게시글 아님)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 게시글 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
    
                
    put:
      summary: 게시글 수정
      description: 사용자가 자신이 작성한 게시글을 수정합니다.
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePostRequest'
      responses:
        '200':
          description: 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostUpdateResponse'
        '400':
          description: 유효성 검사 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 필요
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 권한 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 게시글 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /post:
    get:
      summary: 게시글 목록 조회
      description: 전체 게시글 목록을 최신순으로 조회합니다. 정렬/검색/필터는 확장 가능합니다.
      parameters:
        - name: page
          in: query
          required: false
          description: 페이지 번호 (0부터 시작)
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          description: 페이지당 게시글 수
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          required: false
          description: 정렬 기준 (`createdAt,desc` 또는 `likeCount,desc` 등)
          schema:
            type: string
            example: "createdAt,desc"
      responses:
        '200':
          description: 게시글 목록 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostListResponse'
        '400':
          description: 잘못된 요청 파라미터
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: 게시글 작성
      description: 사용자가 새로운 게시글을 작성한다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        '201':
          description: 게시글 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCreateResponse'
        '400':
          description: 유효성 검사 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 필요
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /post/{postId}/comment:
    post:
      summary: 댓글 작성
      description: 사용자가 게시글에 댓글을 작성합니다.
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  example: "좋은 글 감사합니다!"
      responses:
        '201':
          description: 댓글 작성 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  createdAt:
                    type: string
                    format: date-time
        '400':
          description: 유효성 검사 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 필요
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 게시글 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /comment/{commentId}:
    delete:
      summary: 댓글 삭제
      description: 사용자가 자신의 댓글을 삭제합니다.
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 삭제 성공 (내용 없음)
        '401':
          description: 인증 필요
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 권한 없음 (본인 댓글이 아님)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 댓글 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /post/{postId}/like:
    post:
      summary: 게시글 추천
      description: 사용자가 게시글을 추천합니다.
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: 추천 성공
        '400':
          description: 이미 추천한 경우 또는 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 필요
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 게시글 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: 게시글 추천 취소
      description: 사용자가 추천한 게시글의 추천을 취소합니다.
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 추천 취소 성공 (내용 없음)
        '400':
          description: 추천하지 않은 게시글을 취소한 경우
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 필요
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 게시글 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
