openapi: 3.0.0
info:
  title: Developer Community API
  version: 1.0.0

components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: string
          example: "잘못된 요청입니다"
        code:
          type: string
          example: "INVALID_REQUEST"
        timestamp:
          type: string
          format: date-time
          example: "2025-03-26T16:00:00Z"

    UserSimple:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nickname:
          type: string
          example: "개발자닉네임"
        profileImageUrl:
          type: string
          format: uri
          example: "https://devcommunity-file.s3.ap-northeast-2.amazonaws.com/profiles/sample_profile.png"

    PostDetailResponse:
      type: object
      properties:
        id:
          type: integer
          example: 10
        title:
          type: string
          example: "게시글 제목입니다"
        content:
          type: string
          example: "게시글 내용입니다. 마크다운 지원!"
        author:
          $ref: '#/components/schemas/UserSimple'
        createdAt:
          type: string
          format: date-time
          example: "2025-03-26T10:00:00Z"
        likeCount:
          type: integer
          example: 25
        isLiked:
          type: boolean
          example: true
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        tags:
          type: array
          items:
            type: string
          example:
            - "java"
            - "spring"
            - "swagger"

    PostCreateResponse:
      type: object
      properties:
        id:
          type: integer
          example: 11
        createdAt:
          type: string
          format: date-time
          example: "2025-03-27T14:30:00Z"

    Comment:
      type: object
      properties:
        id:
          type: integer
          example: 101
        author: # 댓글 작성자 닉네임 또는 UserSimple 참조 고려
          type: string
          example: "댓글작성자"
        content:
          type: string
          example: "이것은 댓글 내용입니다."
        createdAt:
          type: string
          format: date-time
          example: "2025-03-26T11:00:00Z"

    PostUpdateResponse:
      type: object
      properties:
        id:
          type: integer
          example: 10
        updatedAt:
          type: string
          format: date-time
          example: "2025-03-28T09:15:00Z"

    PostSummary:
      type: object
      properties:
        id:
          type: integer
          example: 12
        title:
          type: string
          example: "요약된 게시글 제목"
        author:
          $ref: '#/components/schemas/UserSimple'
        likeCount:
          type: integer
          example: 5
        commentCount:
          type: integer
          example: 2
        createdAt:
          type: string
          format: date-time
          example: "2025-03-25T18:00:00Z"

    PostListResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/PostSummary'
        totalPages:
          type: integer
          example: 10
        totalElements:
          type: integer
          example: 98
        number: # 현재 페이지 번호 (0부터 시작)
          type: integer
          example: 0
        size: # 페이지 당 요소 수
          type: integer
          example: 10
        tags:
          type: array
          items:
            type: string
          example:
            - "java"
            - "spring"
            - "swagger"

    UpdateDto: # 게시글 생성 및 수정 시 사용
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
          example: "새로운 게시글 제목"
        content:
          type: string
          example: "새로운 게시글 내용입니다. 태그도 포함할 수 있습니다."
        tags:
          type: array
          items:
            type: string
            example: "Java"
          example: ["Spring", "Java", "Database"]

    PasswordChangeRequest:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
          format: password
          example: "currentSecurePassword123"
        newPassword:
          type: string
          format: password
          example: "newStrongPassword456!"

    NicknameChangeRequest:
      type: object
      required:
        - nickname
      properties:
        nickname:
          type: string
          example: "새로운멋진닉네임"

    ProfileImageUpdateResponse:
      type: object
      properties:
        profileImageUrl:
          type: string
          format: uri
          example: "https://devcommunity-file.s3.ap-northeast-2.amazonaws.com/profiles/user123/profile_image_timestamp.png"

    SimpleSuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: "요청이 성공적으로 처리되었습니다."
        timestamp:
          type: string
          format: date-time
          example: "2025-03-28T10:00:00Z"

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: JSESSIONID # 실제 사용하는 세션 쿠키 이름

paths:
  /auth/signup:
    post:
      summary: 회원가입
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id: 
                  type: string
                email:
                  type: string
                password:
                  type: string
                nickname:
                  type: string
      responses:
        '201':
          description: 회원가입 성공
        '400':
          description: 유효성 검증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: 중복된 이메일, 로그인 ID 또는 닉네임
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      summary: 로그인
      description: 이메일과 비밀번호로 로그인합니다. 성공 시 세션이 생성되며, JSESSIONID가 쿠키로 전달됩니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - loginId 
                - password
              properties:
                loginId:
                  type: string
                  example: "user123"
                password:
                  type: string
                  format: password
                  example: "securePassword123"
      responses:
        '200':
          description: 로그인 성공
          headers:
            Set-Cookie:
              description: "세션 쿠키 (JSESSIONID)"
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  loginId:
                    type: string
                  nickname:
                    type: string
        '401':
          description: "인증 실패 (아이디 또는 비밀번호 불일치)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      summary: 로그아웃
      description: 현재 세션을 종료합니다.
      security:
        - cookieAuth: []
      responses:
        '204':
          description: "로그아웃 성공 (세션 만료)"
        '401':
          description: "인증되지 않은 사용자 (세션 없음)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/email/verify:
    post:
      summary: 이메일 인증 코드 전송
      description: 회원가입 전에 학교 이메일로 인증 코드를 보냅니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: "20230001@school.ac.kr"
      responses:
        '200':
          description: 인증 메일 전송 성공
        '400':
          description: "잘못된 이메일 형식 또는 이미 인증된 이메일"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/email/check:
    post:
      summary: 이메일 인증 코드 확인
      description: 사용자에게 전송된 인증 코드를 확인합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - code
              properties:
                email:
                  type: string
                code:
                  type: string
      responses:
        '200':
          description: 인증 성공
        '400':
          description: "인증 실패 (코드 불일치, 만료 등)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /member/{loginId}:
    get:
      summary: 사용자 정보 조회
      description: loginId에 해당하는 사용자의 프로필 정보를 조회합니다.
      parameters:
        - name: loginId
          in: path
          required: true
          schema:
            type: string
          description: 조회할 사용자의 로그인 ID
      responses:
        '200':
          description: 회원 정보 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  nickname:
                    type: string
                  profileImageUrl:
                    type: string
                    format: uri
                  followerCount:
                    type: integer
                  followingCount:
                    type: integer
                  receivedLikeCount:
                    type: integer
        '404':
          description: 사용자를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /member/{loginId}/followers:
    get:
      summary: 팔로워 목록 조회
      description: loginId를 기준으로 해당 사용자의 팔로워 목록을 조회합니다.
      parameters:
        - name: loginId
          in: path
          required: true
          schema:
            type: string
          description: 팔로워 목록을 조회할 사용자의 로그인 ID
      responses:
        '200':
          description: 팔로워 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    loginId:
                      type: string
                    nickname:
                      type: string
                    profileImageUrl:
                      type: string
                      format: uri
        '404':
          description: 사용자를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /member/{loginId}/followings:
    get:
      summary: 팔로잉 목록 조회
      description: loginId를 기준으로 해당 사용자가 팔로우한 사용자 목록을 조회합니다.
      parameters:
        - name: loginId
          in: path
          required: true
          schema:
            type: string
          description: 팔로잉 목록을 조회할 사용자의 로그인 ID
      responses:
        '200':
          description: 팔로잉 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    loginId:
                      type: string
                    nickname:
                      type: string
                    profileImageUrl:
                      type: string
                      format: uri
        '404':
          description: 사용자를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /member/{loginId}/follow:
    post:
      summary: 팔로우 추가
      description: 로그인한 사용자가 loginId에 해당하는 사용자를 팔로우합니다.
      security:
        - cookieAuth: []
      parameters:
        - name: loginId
          in: path
          required: true
          schema:
            type: string
          description: 팔로우할 대상 사용자의 로그인 ID
      responses:
        '200':
          description: 팔로우 성공
        '400':
          description: "이미 팔로우 중이거나 자기 자신을 팔로우하려는 경우"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 필요
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 팔로우 대상 사용자를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: 팔로우 취소 (언팔로우)
      description: 로그인한 사용자가 loginId에 해당하는 사용자에 대한 팔로우를 취소합니다.
      security:
        - cookieAuth: []
      parameters:
        - name: loginId
          in: path
          required: true
          schema:
            type: string
          description: 언팔로우할 대상 사용자의 로그인 ID
      responses:
        '200':
          description: 언팔로우 성공
        '400':
          description: "팔로우 관계가 아닌 사용자를 언팔로우하려는 경우"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 필요
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 언팔로우 대상 사용자를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /member/me/password:
    put:
      summary: 비밀번호 변경
      description: 로그인한 사용자의 비밀번호를 변경합니다.
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
      responses:
        '200':
          description: 비밀번호 변경 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleSuccessResponse'
        '400':
          description: "유효성 검증 실패 (예: 현재 비밀번호 불일치, 새 비밀번호 정책 위반)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 필요
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /member/me/nickname:
    put:
      summary: 닉네임 변경
      description: 로그인한 사용자의 닉네임을 변경합니다.
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NicknameChangeRequest'
      responses:
        '200':
          description: 닉네임 변경 성공, 변경된 사용자 정보 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSimple' # 변경된 사용자 정보 반환
        '400':
          description: "유효성 검증 실패 (예: 닉네임 형식 오류, 길이 제한)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 필요
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: 이미 사용 중인 닉네임
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /member/me/profile-image:
    post:
      summary: 프로필 이미지 변경/업로드
      description: 로그인한 사용자의 프로필 이미지를 업로드하거나 변경합니다.
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: 업로드할 이미지 파일
      responses:
        '200':
          description: 프로필 이미지 업로드/변경 성공, 새로운 이미지 URL 반환
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileImageUpdateResponse'
        '400':
          description: 잘못된 파일 형식, 파일 크기 초과 또는 파일 처리 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 필요
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: 프로필 이미지 삭제 (기본값으로 재설정)
      description: 로그인한 사용자의 프로필 이미지를 기본 이미지로 재설정합니다. 응답에는 기본 프로필 이미지 URL이 포함됩니다.
      security:
        - cookieAuth: []
      responses:
        '200':
          description: 프로필 이미지 삭제 및 기본값 재설정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileImageUpdateResponse' # 기본 이미지 URL 포함
        '401':
          description: 인증 필요
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /post:
    get:
      summary: 게시글 목록 조회
      description: 전체 게시글 목록을 최신순으로 조회합니다. 페이지네이션, 정렬 옵션을 지원합니다.
      parameters:
        - name: page
          in: query
          required: false
          description: "페이지 번호 (0부터 시작)"
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          description: 페이지당 게시글 수
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          required: false
          description: "정렬 기준 및 방향 (예: `createdAt,desc` 또는 `likeCount,desc`)"
          schema:
            type: string
            example: "createdAt,desc"
      responses:
        '200':
          description: 게시글 목록 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostListResponse'
        '400':
          description: "잘못된 요청 파라미터 (예: 정렬 기준 형식 오류)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: 게시글 작성
      description: 사용자가 새로운 게시글을 작성합니다.
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDto'
      responses:
        '201':
          description: 게시글 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCreateResponse'
        '400':
          description: "유효성 검사 실패 (예: 제목 또는 내용 누락)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 필요
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /post/{postId}:
    get:
      summary: 게시글 상세 조회
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
          description: 조회할 게시글의 ID
      responses:
        '200':
          description: 게시글 상세 정보
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDetailResponse'
        '404':
          description: 해당 ID의 게시글을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: 게시글 수정
      description: 사용자가 자신이 작성한 게시글을 수정합니다.
      security:
        - cookieAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
          description: 수정할 게시글의 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDto'
      responses:
        '200':
          description: 게시글 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostUpdateResponse'
        '400':
          description: 유효성 검사 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 필요
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: "권한 없음 (본인이 작성한 게시글이 아님)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 해당 ID의 게시글을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: 게시글 삭제
      description: 사용자가 자신이 작성한 게시글을 삭제합니다.
      security:
        - cookieAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
          description: 삭제할 게시글의 ID
      responses:
        '204':
          description: 게시글 삭제 성공 (내용 없음)
        '401':
          description: 인증 필요
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: "권한 없음 (본인이 작성한 게시글이 아님)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 해당 ID의 게시글을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /post/{postId}/comment:
    post:
      summary: 댓글 작성
      description: 사용자가 특정 게시글에 댓글을 작성합니다.
      security:
        - cookieAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
          description: 댓글을 작성할 게시글의 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  example: "좋은 글 감사합니다!"
      responses:
        '201':
          description: 댓글 작성 성공, 생성된 댓글 정보 반환
          content:
            application/json:
              schema: # 생성된 댓글 객체 (Comment 스키마와 유사하게 정의)
                type: object
                properties:
                  id:
                    type: integer
                  createdAt:
                    type: string
                    format: date-time
        '400':
          description: "유효성 검사 실패 (예: 내용 누락)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 필요
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 댓글을 작성할 게시글을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /comment/{commentId}:
    delete:
      summary: 댓글 삭제
      description: 사용자가 자신이 작성한 댓글을 삭제합니다.
      security:
        - cookieAuth: []
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
          description: 삭제할 댓글의 ID
      responses:
        '204':
          description: 댓글 삭제 성공 (내용 없음)
        '401':
          description: 인증 필요
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: "권한 없음 (본인이 작성한 댓글이 아님)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 해당 ID의 댓글을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /post/{postId}/like:
    post:
      summary: 게시글 추천 (좋아요)
      description: 사용자가 특정 게시글을 추천합니다.
      security:
        - cookieAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
          description: 추천할 게시글의 ID
      responses:
        '201': # 또는 '200' OK
          description: 게시글 추천 성공
        '400':
          description: "이미 추천한 게시글이거나 잘못된 요청"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 필요
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 추천할 게시글을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: 게시글 추천 취소
      description: 사용자가 추천한 게시글의 추천을 취소합니다.
      security:
        - cookieAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
          description: 추천을 취소할 게시글의 ID
      responses:
        '204':
          description: 게시글 추천 취소 성공 (내용 없음)
        '400':
          description: "추천하지 않은 게시글의 추천을 취소하려는 경우"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 필요
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 추천을 취소할 게시글을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /post/tag/search:
    get:
      summary: 태그 기반 게시글 검색
      description: 특정 태그가 포함된 게시글 목록을 검색합니다.
      parameters:
        - name: query
          in: query
          required: true
          description: 검색할 태그 이름
          schema:
            type: string
            example: "SpringBoot"
        - name: page
          in: query
          required: false
          description: "페이지 번호 (0부터 시작)"
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          description: 페이지당 게시글 수
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          required: false
          description: 정렬 기준
          schema:
            type: string
            example: "createdAt,desc"
      responses:
        '200':
          description: "태그 검색 결과 (게시글 목록)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostListResponse'
        '400':
          description: "잘못된 요청 파라미터 (예: query 누락)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /post/search:
    get:
      summary: 키워드 기반 게시글 검색
      description: 게시글 제목 또는 내용에 특정 키워드를 포함하는 게시글 목록을 검색합니다.
      parameters:
        - name: query
          in: query
          required: true
          description: 검색할 키워드
          schema:
            type: string
            example: "데이터베이스"
        - name: page
          in: query
          required: false
          description: "페이지 번호 (0부터 시작)"
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          description: 페이지당 게시글 수
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          required: false
          description: 정렬 기준
          schema:
            type: string
            example: "createdAt,desc"
      responses:
        '200':
          description: "키워드 검색 결과 (게시글 목록)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostListResponse'
        '400':
          description: "잘못된 요청 파라미터 (예: query 누락)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /post/my/{userId}: # 경로 일관성 고려: /member/{userId}/posts 또는 /member/me/posts (로그인 사용자)
    get:
      summary: 특정 사용자가 작성한 게시글 목록 조회
      description: "userId에 해당하는 사용자가 작성한 모든 게시글 목록을 조회합니다."
      parameters:
        - name: userId # 경로 파라미터가 loginId(string)와 userId(integer)로 혼용되는 점 참고
          in: path
          required: true
          schema:
            type: integer # 또는 string (loginId) - API 전반적 일관성 필요
          description: "작성글을 조회할 사용자의 ID"
      responses:
        '200':
          description: 사용자 작성 게시글 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostSummary'
        '404':
          description: 해당 ID의 사용자를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /post/like/{userId}: # 경로 일관성 고려: /member/{userId}/liked-posts 또는 /member/me/liked-posts
    get:
      summary: 특정 사용자가 좋아요한 게시글 목록 조회
      description: "userId에 해당하는 사용자가 좋아요를 누른 모든 게시글 목록을 조회합니다."
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer # 또는 string (loginId)
          description: "좋아요한 글을 조회할 사용자의 ID"
      responses:
        '200':
          description: 좋아요한 게시글 목록 조회 성공
          content:
            application/json:
              schema: # PostListResponse와 유사한 페이징된 PostSummary 배열 또는 단순 PostSummary 배열
                type: array
                items:
                  $ref: '#/components/schemas/PostSummary'
        '404':
          description: 해당 ID의 사용자를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'























