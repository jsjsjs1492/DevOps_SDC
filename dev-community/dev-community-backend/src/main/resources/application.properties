# dev-community-backend/src/test/resources/application.properties
# 이 파일은 테스트 실행 시 src/main/resources/application-prod.properties 설정을 오버라이드합니다.

# 1. H2 인메모리 데이터베이스 설정 (테스트용)
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

# 2. JPA/Hibernate 설정 (H2 데이터베이스에 맞춤)
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update # 테스트 실행 시 스키마를 자동으로 업데이트합니다. (create 또는 create-drop도 가능)
spring.jpa.show-sql=true # 테스트 시 SQL 쿼리 로그 표시 (선택 사항)
spring.jpa.properties.hibernate.format_sql=true # SQL 쿼리 포맷팅 (선택 사항)

# 3. 외부 서비스 비활성화 또는 더미 설정 (테스트 시 불필요한 연결 방지)

# Redis 설정 (테스트 시 Redis 연결 시도 방지)
# 만약 Redis 빈이 컨텍스트 로딩에 필수적이라면, @MockBean을 사용하거나 localhost:-1 등으로 설정할 수 있습니다.
# 여기서는 기본적으로 테스트 시 Redis 연결을 시도하지 않도록 설정하거나,
# redis 서버가 띄워져있다면 default host, port로 연결하도록 합니다.
# spring.data.redis.host=localhost 
# spring.data.redis.port=6379 

# 메일 서비스 설정 (테스트 시 실제 메일 발송 방지)
# 대부분의 테스트에서는 메일 발송 기능을 모킹하거나 완전히 비활성화합니다.
# spring.mail.properties.mail.smtp.auth=false
# spring.mail.properties.mail.smtp.ssl.enable=false
# spring.mail.default-encoding=UTF-8
# spring.mail.properties.mail.debug=false
# 또는 더 강력하게 메일 자동 구성을 제외하려면 @SpringBootTest 어노테이션에 exclude 속성 사용

# AWS S3 설정 (테스트 시 실제 S3 연결 방지)
# S3 클라이언트 빈 생성에 문제가 있다면 @MockBean으로 모의 객체를 주입해야 할 수 있습니다.
# 여기서는 최소한의 더미 값을 제공하여 설정 오류를 방지합니다.
cloud.aws.s3.bucket=test-bucket
cloud.aws.s3.region=ap-northeast-2
cloud.aws.credentials.access-key=test
cloud.aws.credentials.secret-key=test

# 서버 세션 쿠키 보안 설정 (테스트 환경에서는 보통 false 유지)
# server.servlet.session.cookie.secure=false