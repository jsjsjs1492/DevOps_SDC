# dev-community/prometheus/prometheus.yml
global:
  scrape_interval: 15s # 모든 타겟에서 메트릭을 얼마나 자주 스크랩할지

# 스크랩 대상 정의
scrape_configs:
  # Prometheus 자체 모니터링 (선택 사항)
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090'] # Prometheus 컨테이너의 내부 주소 및 포트

  # 호스트 메트릭 (Node Exporter)
  # node_exporter는 host 네트워크 모드에서 실행되므로, Prometheus는 EC2 인스턴스의 실제 IP를 통해 접근해야 합니다.
  # EC2 인스턴스 IP를 사용하거나, docker compose network에서 호스트 게이트웨이를 통하는 방법을 사용해야 합니다.
  # 여기서는 BACKEND_SERVER 환경 변수의 IP 부분을 활용한다고 가정합니다.
  - job_name: 'node_exporter'
    static_configs:
      - targets: ['${BACKEND_URL}:9100'] # Jenkinsfile의 BACKEND_URL (EC2 인스턴스 IP) + Node Exporter의 기본 포트
        # 이 BACKEND_URL은 Jenkinsfile에서 docker compose up 시 ssh 쉘 내에서 export 되어야 합니다.
        # 예: export BACKEND_URL="52.78.59.185"
    # Node Exporter의 기본 포트는 9100

  # 컨테이너 메트릭 (cAdvisor)
  - job_name: 'cadvisor'
    static_configs:
      - targets: ['cadvisor:8080'] # docker-compose.yml에 정의된 cAdvisor 서비스 이름과 포트

  # 백엔드 애플리케이션 메트릭 (Spring Boot Actuator)
  # Spring Boot 애플리케이션에 spring-boot-starter-actuator 의존성을 추가하고
  # management.endpoints.web.exposure.include=health,prometheus 설정을 해야 합니다.
  - job_name: 'backend_app'
    static_configs:
      - targets: ['backend:8081'] # docker-compose.yml에 정의된 백엔드 서비스 이름과 포트
    metrics_path: '/actuator/prometheus' # Spring Boot Actuator의 Prometheus 엔드포인트
    # 만약 Spring Security로 /actuator 엔드포인트가 보호된다면, basic_auth 설정 필요
    # basic_auth:
    #   username: 'your-username'
    #   password: 'your-password'
